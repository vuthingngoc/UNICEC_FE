{"ast":null,"code":"'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (charCodeA < alphabetIndexMapLength && charCodeB < alphabetIndexMapLength && alphabetIndexMap[charCodeA] !== -1 && alphabetIndexMap[charCodeB] !== -1) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  if (aIndex >= lengthA && bIndex < lengthB && lengthA >= lengthB) {\n    return -1;\n  }\n\n  if (bIndex >= lengthB && aIndex < lengthA && lengthB >= lengthA) {\n    return 1;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function (a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function get() {\n      return alphabet;\n    },\n    set: function set(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    }\n  }\n});\nmodule.exports = naturalCompare;","map":{"version":3,"sources":["C:/Users/PC/Desktop/UNICS_FE/node_modules/string-natural-compare/natural-compare.js"],"names":["alphabet","alphabetIndexMap","alphabetIndexMapLength","isNumberCode","code","naturalCompare","a","b","lengthA","length","lengthB","aIndex","bIndex","charCodeA","charCodeAt","charCodeB","numStartA","numStartB","numEndA","numEndB","difference","caseInsensitive","i","toLowerCase","Object","defineProperties","get","set","value","undefined","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (\n        charCodeA < alphabetIndexMapLength &&\n        charCodeB < alphabetIndexMapLength &&\n        alphabetIndexMap[charCodeA] !== -1 &&\n        alphabetIndexMap[charCodeB] !== -1\n      ) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  if (aIndex >= lengthA && bIndex < lengthB && lengthA >= lengthB) {\n    return -1;\n  }\n\n  if (bIndex >= lengthB && aIndex < lengthA && lengthB >= lengthA) {\n    return 1;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function(a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function() {\n      return alphabet;\n    },\n\n    set: function(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    },\n  },\n});\n\nmodule.exports = naturalCompare;\n"]},"metadata":{},"sourceType":"script"}