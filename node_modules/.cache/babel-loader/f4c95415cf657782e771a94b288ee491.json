{"ast":null,"code":"/**\n * Source: https://github.com/timoxley/to-array\n *\n * Convert an array-like object into an `Array`.\n * If `collection` is already an `Array`, then will return a clone of `collection`.\n *\n * @param {Array | Mixed} collection An `Array` or array-like object to convert e.g. `arguments` or `NodeList`\n * @return {Array} Naive conversion of `collection` to a new `Array`.\n * @api public\n */\nmodule.exports = function toArray(collection) {\n  if (typeof collection === 'undefined') return [];\n  if (collection === null) return [null];\n  if (collection === window) return [window];\n  if (typeof collection === 'string') return [collection];\n  if (isArray(collection)) return collection;\n  if (typeof collection.length != 'number') return [collection];\n  if (typeof collection === 'function' && collection instanceof Function) return [collection];\n  var arr = [];\n\n  for (var i = 0, il = collection.length; i < il; i++) {\n    if (Object.prototype.hasOwnProperty.call(collection, i) || i in collection) {\n      arr.push(collection[i]);\n    }\n  }\n\n  if (!arr.length) return [];\n  return arr;\n};\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}","map":{"version":3,"sources":["C:/Users/PC/Desktop/UNICS_FE/node_modules/list.js/src/utils/to-array.js"],"names":["module","exports","toArray","collection","window","isArray","length","Function","arr","i","il","Object","prototype","hasOwnProperty","call","push","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,UAAjB,EAA6B;AAC5C,MAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuC,OAAO,EAAP;AACvC,MAAIA,UAAU,KAAK,IAAnB,EAAyB,OAAO,CAAC,IAAD,CAAP;AACzB,MAAIA,UAAU,KAAKC,MAAnB,EAA2B,OAAO,CAACA,MAAD,CAAP;AAC3B,MAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC,OAAO,CAACA,UAAD,CAAP;AACpC,MAAIE,OAAO,CAACF,UAAD,CAAX,EAAyB,OAAOA,UAAP;AACzB,MAAI,OAAOA,UAAU,CAACG,MAAlB,IAA4B,QAAhC,EAA0C,OAAO,CAACH,UAAD,CAAP;AAC1C,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,YAAYI,QAA9D,EAAwE,OAAO,CAACJ,UAAD,CAAP;AAExE,MAAIK,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGP,UAAU,CAACG,MAAhC,EAAwCG,CAAC,GAAGC,EAA5C,EAAgDD,CAAC,EAAjD,EAAqD;AACnD,QAAIE,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCX,UAArC,EAAiDM,CAAjD,KAAuDA,CAAC,IAAIN,UAAhE,EAA4E;AAC1EK,MAAAA,GAAG,CAACO,IAAJ,CAASZ,UAAU,CAACM,CAAD,CAAnB;AACD;AACF;;AACD,MAAI,CAACD,GAAG,CAACF,MAAT,EAAiB,OAAO,EAAP;AACjB,SAAOE,GAAP;AACD,CAjBD;;AAmBA,SAASH,OAAT,CAAiBG,GAAjB,EAAsB;AACpB,SAAOG,MAAM,CAACC,SAAP,CAAiBI,QAAjB,CAA0BF,IAA1B,CAA+BN,GAA/B,MAAwC,gBAA/C;AACD","sourcesContent":["/**\n * Source: https://github.com/timoxley/to-array\n *\n * Convert an array-like object into an `Array`.\n * If `collection` is already an `Array`, then will return a clone of `collection`.\n *\n * @param {Array | Mixed} collection An `Array` or array-like object to convert e.g. `arguments` or `NodeList`\n * @return {Array} Naive conversion of `collection` to a new `Array`.\n * @api public\n */\n\nmodule.exports = function toArray(collection) {\n  if (typeof collection === 'undefined') return []\n  if (collection === null) return [null]\n  if (collection === window) return [window]\n  if (typeof collection === 'string') return [collection]\n  if (isArray(collection)) return collection\n  if (typeof collection.length != 'number') return [collection]\n  if (typeof collection === 'function' && collection instanceof Function) return [collection]\n\n  var arr = [];\n  for (var i = 0, il = collection.length; i < il; i++) {\n    if (Object.prototype.hasOwnProperty.call(collection, i) || i in collection) {\n      arr.push(collection[i])\n    }\n  }\n  if (!arr.length) return []\n  return arr\n}\n\nfunction isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}\n"]},"metadata":{},"sourceType":"script"}